#!/usr/bin/python3

import sys
import os
import socket
import selectors
import threading
import types
import tkinter
from tkinter import filedialog, Label, Entry, Button, Text, END, W
from argparse import ArgumentParser
import pickle
import tempfile
import subprocess
import shutil
import traceback

HOST = '127.0.0.1'
# @Question: which port?
PORT = 65442

CONFIG_FOLDER = os.path.expanduser('~/.config/vfcut')
LOG_FOLDER_PATH = '/tmp/vfcut/'
LOG_FILE_PATH = os.path.join(LOG_FOLDER_PATH, 'vfcut_log.txt')
URL_VID_LOG_PATH = os.path.join(CONFIG_FOLDER, 'url_vids.txt')
CUT_LOG_PATH = os.path.join(CONFIG_FOLDER, 'cuts.txt')


def is_url(a_str):
    return a_str.startswith('http')


# use a custom ArgumentParser so we do not exit
# on wrong arguments, as we will parse the commands from any client sent to
# the server, just log the output and wait for the next connection
class CustomArgumentParser(ArgumentParser):
    def error(self, message: Text):
        self.print_help(sys.stderr)
        raise Exception(message)


def get_parser():
    parser = CustomArgumentParser()
    # parser.add_argument("-o", dest="output", help="store clip in output file")  # remove,
    # as we set this from the gui?
    parser.add_argument("-t", "--time", dest="time", help="supply start or end time")
    parser.add_argument("-i", "--input", dest="input", help="supply an input .mp4 file")
    parser.add_argument("-q", "-e", "-k", "--exit", "--quit", action="store_true", dest="quit",
                        help="close server")
    parser.add_argument("-b", "--buffer-all", action="store_true", dest="buffer_all", default=False)
    parser.add_argument("-c", "--cut-buffered-cuts", action="store_true", dest="cut_buffered_cuts",
                        default=False)
    parser.add_argument("-s", "--status", action="store_true", dest="status",
                        help="show status (running jobs)")
    parser.add_argument("--working-dir", dest="working_dir")

    parser.add_argument("--monitor", action="store_true", dest="monitor")  # remove?
    return parser


def log(key, value):
    print(f"{key} : {value}")
    logf = open(LOG_FILE_PATH, 'a')
    logf.write(f"{key}: {value}\n\n")
    if key == 'exception':
        logf.write('some additional data\n')
        logf.write(traceback.format_exc())
        logf.write(str(traceback.format_stack()))
    logf.close()


class Cut:

    def is_url(self):
        return is_url(self.in_filepath)

    def get_begin_time(self):
        return self.cut_range[0]

    def get_end_time(self):
        return self.cut_range[1]

    def is_cut_time_set(self):
        return len(self.cut_range) >= 2

    def get_out_file_path(self):
        out_file_path = os.path.join(self.output_folder, self.out_filename)
        if not out_file_path.endswith(".mp4"):
            out_file_path += ".mp4"
        return out_file_path

    def set_out_file_path(self, path):
        self.output_folder = os.path.dirname(path)
        self.out_filename = os.path.basename(path)

    def __init__(self, ):
        self.reset_start = False
        self.reset_end = False
        self.in_filepath = None
        self.cut_range = None
        self.out_filename = None
        self.working_dir = None
        self.output_folder = None
        self.cut_range = []
        self.working_dir = None
        #self.cut_name

    def __str__(self):
        return f"Cut: ({self.in_filepath} --> {self.get_out_file_path()}) time:{self.cut_range}"

    def set_in_filepath(self, in_filepath):
        self.in_filepath = in_filepath

    def set_out_values(self, out_filename, output_folder):
        self.out_filename = out_filename
        self.output_folder = output_folder

    def set_begin(self, begin_time_str):
        if not self.cut_range:
            self.cut_range.append(begin_time_str)
        else:
            self.cut_range[0] = begin_time_str

    def set_end(self, end_time_str):
        if len(self.cut_range) < 2:
            self.cut_range.append(end_time_str)
        else:
            self.cut_range[1] = end_time_str

    def add_time(self, time_str):
        self.cut_range.append(time_str)

    def clear_time(self):
        self.cut_range.clear()

    def create_thread(self, event=None):
        cut_dir = '/tmp/vfcut/cut'
        if not os.path.exists(cut_dir):
            os.makedirs(cut_dir)
        tmp_name = os.path.join(cut_dir, os.path.basename(self.get_out_file_path()))

        def ffmpeg_worker(ffmpeg_param_list, in_tmp_name, out_path, dl_finished_event):
            if dl_finished_event:
                dl_finished_event.wait()
            subprocess.run(ffmpeg_param_list)
            log('ffmpeg worker', f"cut {ffmpeg_param_list} finished")
            # make
            out_folder = os.path.dirname(out_path)
            if not os.path.exists(out_folder):
                os.makedirs(out_folder)
            log('ffmpeg worker', f"copy {in_tmp_name} to {out_path}")
            shutil.copyfile(tmp_name, out_path)
            log('ffmpeg_worker', f"cut {ffmpeg_param_list} finished copying")
            return


        # you need to have all options separately for subprocess.run to work
        ffmpeg_params = ["ffmpeg", "-i", f"{self.in_filepath}", "-ss", f"{self.cut_range[0]}",
                         "-to", f"{self.cut_range[1]}", f"{tmp_name}"]
        log('ffmpeg_worker: start cutting: ', ffmpeg_params)
        thread = threading.Thread(target=ffmpeg_worker, args=(ffmpeg_params,
                                                              tmp_name,
                                                              self.get_out_file_path(),
                                                              event))
        thread.cut = self
        return thread


class VidCutter:

    def __init__(self):
        self.running = []
        self.finished = []
        self.threads = []
        self.url_to_video_path = {}
        self.url_to_event = {}
        self.buffer_all = False
        self.cut_buffer = []
        self.max_threads = 10
        self.out_files = []

    # if there are already max_threads, all subsequent cuts are buffered
    # here we check if one thread finished and pull the next cut to perform
    # do not use threading.enumerate(), this only enumerates *alive* threads
    def update(self):
        for thread in enumerate(self.threads):
            if not thread.is_alive():
                log("THREAD", f"join and remove thread: {thread}")
                if thread.cut:  # no download thread, a cutting thread
                    cut = thread.cut
                    self.running.remove(cut)
                    self.finished.append(cut)
                thread.join()
                self.threads.remove(thread)
        while len(threading.enumerate()) < self.max_threads and self.cut_buffer:
            self.perform_cut(self.cut_buffer.pop(0))

    def dl_from_youtube(self, url, copy_output_folder):
        dl_dir = '/tmp/vfcut/dl'
        if not os.path.exists(dl_dir):
            os.makedirs(dl_dir)
        # use a named temporary file just to get a valid random name from /tmp/
        tmp_file = tempfile.NamedTemporaryFile()
        dl_path = os.path.basename(tmp_file.name)
        dl_path = dl_path + ".mp4"  # otherwise youtube-dl will add its own extension
        tmp_file.close()
        # we do not want forward slashes of the url in the filename
        dl_path = os.path.join(dl_dir, dl_path)
        self.url_to_video_path[url] = dl_path
        download_finished_event = threading.Event()
        self.url_to_event[url] = download_finished_event

        def download_worker(download_url, out_filename):
            # you need to specify all options separately, not one big string! otherwise
            # subprocess tries to split based on spaces and doesn't preserver strings with spaces
            # inside the name do not use '>/dev/null', with run it thinks it is another filename
            # THIS IS NOT BASH!!! > redirection is a bash primitive
            params = ["youtube-dl", '-f',
                      'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best', download_url,
                      "-o", out_filename]
            log('run youtube downloader: ', params)
            subprocess.run(params)
            log('downloader finished: ', params)
            title = subprocess.check_output(['youtube-dl', '--get-title', download_url]).decode(
                sys.stdout.encoding)
            try:
                log_url_file = open(URL_VID_LOG_PATH, 'a')
                log_url_file.write(f"{download_url} #### {title}")
                log_url_file.close()
            except:
                log('error', f"could not open: {URL_VID_LOG_PATH}")
            copy_path = copy_output_folder  # os.path.join(copy_output_folder, title)
            log("COPY_VID", f"dl_path:{dl_path}, copy_path: {copy_path}")
            if not os.path.exists(copy_path):
                log("COPY_VID: ", f"path: {copy_path} does not exist, create new folder!!!")
                os.makedirs(copy_path)
            copy_path = os.path.join(copy_path, title)
            copy_path = copy_path + '.mp4'
            shutil.copyfile(dl_path, copy_path)
            download_finished_event.set()

        download_vid_thread = threading.Thread(target=download_worker, args=(url, dl_path))
        download_vid_thread.setDaemon(True)
        download_vid_thread.name = f"Thread [dl_youtube] path: {dl_path}"
        download_vid_thread.start()
        return download_vid_thread, download_finished_event, dl_path

    def cut_youtubedl(self, cut, download_finish_event, video_path):
        cut.in_filepath = video_path
        thread = cut.create_thread(download_finish_event)
        thread.name = f"Thread [cut] in_filepath: {cut.in_filepath} "
        thread.cut = self
        self.threads.append(thread)
        thread.start()
        return thread

    def perform_cut(self, cut):
        self.running.append(cut)
        if cut.is_url():
            log('dl_youtube', f"following url was supplied: {cut.in_filepath}\n start downloading "
                              f"with youtube-dl")
            url = cut.in_filepath
            # we already started downloading
            if url in self.url_to_event:
                log('dl_youtube',
                    f"video: {cut.in_filepath} is already being downloaded.\nCreate a thread to "
                    f"wait for the download to finish.")
                cut_thread = self.cut_youtubedl(cut, self.url_to_event[url],
                                                self.url_to_video_path[url])
            else:
                log('dl_youtube',
                    f"video: {cut.in_filepath} has not started to download.\nCreate a download "
                    f"thread")
                download_thread, download_finish_event, video_path = self.dl_from_youtube(cut.in_filepath,
                                                                            cut.output_folder)
                self.threads.append(download_thread)
                self.cut_youtubedl(cut, download_finish_event, video_path)

        else:
            log('cut',
                f"video: {cut.in_filepath} is not an url, start cutting thread normally.")
            cut_thread = cut.create_thread()
            self.threads.append(cut_thread)
            cut_thread.start()

    def cut_all_buffered_cuts(self):
        for cut in self.cut_buffer:
            self.cut_buffer.remove(cut)
            self.perform_cut(cut)

    # we not only need to check if the file exists somewhere
    # but also if a buffered cut will create the same output file
    def is_filepath_unique(self, filepath):
        return not (os.path.exists(filepath)) and not filepath in self.out_files

    def get_out_file_path_unique(self, filepath):
        index = 1
        dirname = os.path.dirname(filepath)
        basename = os.path.basename(filepath)
        extension = os.path.splitext(basename)[1]
        while not self.is_filepath_unique(filepath):
            log('out filename change', f"filename: {filepath} already exists")
            name = os.path.splitext(basename)
            name = name[0] + "_" + str(index) + name[1]
            filepath = os.path.join(dirname, name)
            log('out_filename', f"new potential filename: {filepath}")
            index += 1
        return filepath

    def add_cut(self, cut):
        full_out_path = cut.get_out_file_path()
        if not self.is_filepath_unique(full_out_path):
            cut.set_out_file_path(self.get_out_file_path_unique(full_out_path))
        self.out_files.append(
            cut.get_out_file_path())  # store all file names, so we can check if filename is
        # unique also among
        # buffered cuts
        if self.buffer_all:
            self.cut_buffer.append(cut)
        else:
            if len(threading.enumerate()) < self.max_threads:
                self.perform_cut(cut)
            else:
                self.cut_buffer.append(cut)

    def print_status(self):
        indent = ""
        print("********************")
        print("STATUS:")
        print("********************")
        print(f"Buffered ({len(self.cut_buffer)})")
        if self.cut_buffer:
            indent = "    "
        for cut in self.cut_buffer:
            print(f"{indent}{cut}")

        print("********************")
        indent = ""
        print(f"In Progress ({len(self.running)})")
        if self.running:
            indent = "    "
        for cut in self.running:
            print(f"{indent}{cut}")

        print("********************")
        indent = ""
        print(f"Finished ({len(self.finished)})")
        if self.finished:
            indent = "    "
        for cut in self.finished:
            print(f"{indent}{cut}")
        print("********************")



class VFCutServer:
    def __init__(self, vfcut_socket, selector, argv):
        self.socket = vfcut_socket
        self.parser = get_parser()
        self.vid_cutter = VidCutter()
        self.monitor = []
        self.selector = selector
        self.default_folder = '/clips'
        # if we set a custom path for a specific video
        # use this as the base path instead of the default (dirname(filepath)/clips)
        self.output_path_for_in_filepath = {}
        self.working_dir = None
        self.current_cut = Cut()
        self.current_cut.working_dir = self.working_dir
        self.handle_arguments(argv)
        self.default_working_dir = os.path.join(os.path.expanduser('~'), 'Videos')

    def print_status(self):
        self.vid_cutter.print_status()

    def accept_wrapper(self, sock):
        conn, addr = sock.accept()  # Should be ready to read
        print("accepted connection from", addr)
        conn.setblocking(False)
        data = types.SimpleNamespace(addr=addr, inb=b"", outb=b"")
        events = selectors.EVENT_READ | selectors.EVENT_WRITE
        self.selector.register(conn, events, data=data)

    def update(self):
        self.vid_cutter.update()

    def handle_arguments(self, argv):
        try:
            args = self.parser.parse_args(argv)
        except Exception as ex:
            log("EXCEPTION_CATCH", F"{type(ex)}, {ex}")
            log('exception_details', traceback.print_exc())
            print(ex)
            return
        log('args', args)

        # we need to store the videos somewhere
        if args.working_dir:
            self.working_dir = args.working_dir
            self.current_cut.working_dir

        if args.cut_buffered_cuts:
            self.vid_cutter.cut_all_buffered_cuts()

        if args.buffer_all:
            self.vid_cutter.buffer_all = True

        # ! the order of the parameter handling matters
        # if a new filename appears and the current cut was set to a different filename
        # we need to replace the current cut
        # this happens if you start mpv and start cutting one video
        # then you open a new video and want to cut again, VFCut will have stored the begin time
        # e for the old video, in this case recreate a Cut object and start from the beginning
        if args.input:
            # start a new cut
            in_filepath = args.input
            if not is_url(in_filepath) and args.working_dir:
                log('working_dir', args.working_dir)
                if not os.path.isabs(in_filepath):
                    in_filepath = os.path.join(args.working_dir, in_filepath)
                    log("in_filepath", {in_filepath})
                    if not os.path.exists(in_filepath):
                        log("error", f"filepath: {in_filepath} does not exist!")
                        return

            if self.current_cut.in_filepath and in_filepath != self.current_cut.in_filepath:
                self.current_cut = Cut()
                self.current_cut.working_dir = self.working_dir
            # we already set an output path for this file
            if in_filepath in self.output_path_for_in_filepath:
                self.current_cut.output_folder = self.output_path_for_in_filepath[in_filepath]
            if not self.current_cut.in_filepath:
                self.current_cut.set_in_filepath(in_filepath)

            if not self.current_cut.output_folder:
                if self.current_cut.in_filepath in self.output_path_for_in_filepath:
                    output_folder = self.output_path_for_in_filepath[self.current_cut.in_filepath]
                    self.current_cut.output_folder = output_folder
                elif is_url(self.current_cut.in_filepath):
                    self.current_cut.output_folder = os.path.join(
                        os.path.realpath(self.working_dir), "clips/")
                else:
                    self.current_cut.output_folder = os.path.join(
                        os.path.dirname(self.current_cut.in_filepath),
                        'clips/')
        # this option is usually only called if we use VFCut solely from the cli
        # otherwise the out_filename should be set by the GUI
        # if args.output:
        #    assert False  # remove this?
        #   if not self.current_cut.out_file_path:
        #       output_path = args.output
        #       out_filename = os.path.split(output_path)[-1]
        #       self.current_cut.set_out_values(out_filename, output_path)

        if args.quit:
            exit(0)

        if args.status:
            self.vid_cutter.print_status()

        if args.time:
            if self.current_cut.reset_start:
                self.current_cut.set_begin(args.time)
                self.current_cut.reset_start = False
            elif self.current_cut.reset_end:
                self.current_cut.set_end(args.time)
                self.current_cut.reset_end = False
            else:
                self.current_cut.add_time(args.time)

        # OPEN GUI IF NECESSARY
        if self.current_cut.is_cut_time_set():
            log("gui", 'try to open confirm window')
            try:
                self.open_confirm_window()
            except Exception as ex:
                log('exception', str(ex))
                log('exception_details', traceback.print_exc())

    def service_connection(self, key, mask):
        sock = key.fileobj
        data = key.data
        if mask & selectors.EVENT_READ:
            recv_data = sock.recv(1024)  # Should be ready to read
            if recv_data:
                recv_data = pickle.loads(recv_data)
                self.handle_arguments(recv_data)
                print('receive: ' + repr(recv_data))
                # data.outb += recv_data
            else:
                print("closing connection to", data.addr)
                self.selector.unregister(sock)
                sock.close()
        if mask & selectors.EVENT_WRITE:
            if data.outb:
                print("echoing", repr(data.outb), "to", data.addr)
                sent = sock.send(data.outb)  # Should be ready to write
                data.outb = data.outb[sent:]

    def update_and_listen_connections(self):
        while True:
            self.update()
            # need to have a timeout, otherwise we are stuck in this loop
            # and update is not called until we receive another message
            events = self.selector.select(timeout=1)
            for key, mask in events:
                print('event received')
                if key.data is None:  # it is from the listening socket
                    self.accept_wrapper(key.fileobj)
                else:
                    self.service_connection(key, mask)

    def open_confirm_window(self):
        root = tkinter.Tk()

        bg_color = '#0074D9'
        button_color = '#078cff'  # bg_color #'#001f3f'
        title_font_color = 'black'
        label_bg_color = bg_color
        entry_bg_color = '#bbe0ff'

        root.configure(bg=bg_color)

        def on_closing():
            self.current_cut.clear_time()
            root.destroy()

        root.protocol("WM_DELETE_WINDOW", on_closing)

        root.title("VFCut")
        row = 0
        title = Label(root,
                      text="VFCut",
                      fg=title_font_color,
                      bg=bg_color,
                      font="Helvetica 22 bold italic", width=8)
        padx = 10
        title.grid(row=row, column=0, pady=20, padx=padx)
        row += 1

        max_label_len = 40
        filename_label_text = self.current_cut.in_filepath
        if len(filename_label_text) > max_label_len:
            filename_label_text = "...'" + \
                                  filename_label_text[len(filename_label_text) - max_label_len:] \
                                  + "'"
        label_filename = Label(root, text=f"File/Url: {filename_label_text}", bg=label_bg_color)
        label_filename.grid(row=row, column=0, columnspan=5)
        row += 1

        label_start = Label(root, text="Start:", bg=label_bg_color)
        label_start.grid(row=row, column=0)

        entry_start = Entry(root, bg=entry_bg_color)
        entry_start.insert(END, self.current_cut.get_begin_time())
        entry_start.grid(row=row, column=1)

        def reset_start():
            self.current_cut.reset_start = True
            root.destroy()

        set_start_again = Button(root, text="Reset Start", command=reset_start, width=9,
                                 bg=button_color)
        set_start_again.grid(row=row, column=2)

        row += 1
        label_end = Label(root, text="Stop:", bg=label_bg_color)
        label_end.grid(row=row, column=0)
        entry_end = Entry(root, bg=entry_bg_color)
        entry_end.insert(END, self.current_cut.get_end_time())
        entry_end.grid(row=row, column=1)

        def reset_stop():
            self.current_cut.reset_end = True
            root.destroy()

        set_stop_again = Button(root, text="Reset Stop", command=reset_stop, width=9,
                                bg=button_color)
        set_stop_again.grid(row=row, column=2)

        row += 1

        def load_file():
            chosen_folder = filedialog.askdirectory(initialdir=os.curdir, title="Select folder")
            log('output_folder', chosen_folder)
            self.output_path_for_in_filepath[self.current_cut.in_filepath] = chosen_folder
            self.current_cut.output_folder = chosen_folder

        label_output_folder = Label(root, text="Output Folder:", bg=label_bg_color)
        label_output_folder.grid(row=row, column=0)
        entry_output_folder = Entry(root, bg=entry_bg_color)
        output_folder = self.current_cut.output_folder

        entry_output_folder.insert(END, output_folder)
        entry_output_folder.grid(row=row, column=1, padx=10)
        output_button = Button(root, text="Browse", command=load_file, width=9, bg=button_color)
        output_button.grid(row=row, column=2, sticky=W)

        row += 1
        label_filename = Label(root, text="Output Filename: ", bg=label_bg_color)
        label_filename.grid(row=row, column=0)

        entry_name = Entry(root, bg=entry_bg_color)
        entry_name.grid(row=row, column=1)
        entry_name.focus()

        def create_cut(event=None):
            out_filename = entry_name.get()
            output_path = entry_output_folder.get()
            self.current_cut.set_out_values(out_filename, output_path)
            self.vid_cutter.add_cut(self.current_cut)
            self.current_cut = Cut()
            self.current_cut.working_dir = self.working_dir
            root.destroy()

        row += 2

        create_button = Button(root, text="Create", command=create_cut, width=9, bg=button_color)
        create_button.grid(row=row, column=1, pady=10)

        row += 1

        clear_button = Button(root, text="Cancel", command=on_closing, width=9, height=1,
                              bg=button_color)
        clear_button.grid(row=row, column=0, pady=10)

        row += 2

        label_help = Label(root, text="Insert filename and hit enter or click 'Create' button",
                           bg=label_bg_color)
        label_help.grid(row=row, column=0, columnspan=4, pady=30)

        entry_name.bind('<Return>', create_cut)
        root.geometry('600x450')
        root.mainloop()


class VFCutClient:
    def __init__(self, argv):
        self.selector = selectors.DefaultSelector()
        self.messages = [argv]

    def run_eventloop(self):
        while True:
            events = self.selector.select(timeout=1)
            if events:
                for key, mask in events:
                    self.service_connection(key, mask)
            if not self.selector.get_map():
                break

    # CLIENT
    def service_connection(self, key, mask):
        sock = key.fileobj
        data = key.data
        if mask & selectors.EVENT_READ:
            recv_data = sock.recv(1024)  # Should be ready to read
            if recv_data:
                print("received", repr(recv_data), "from connection", data.connid)
                data.recv_total += len(recv_data)
            if not recv_data or data.recv_total == data.msg_total:
                print("closing connection", data.connid)
                self.selector.unregister(sock)
                sock.close()
        if mask & selectors.EVENT_WRITE:
            if not data.outb and data.messages:
                data.outb = pickle.dumps(data.messages.pop(0))
            if data.outb:
                print("sending", repr(data.outb), "to connection", data.connid)
                sent = sock.send(data.outb)  # Should be ready to write
                data.outb = data.outb[sent:]
            else:
                # directly quit after sending
                # @Incomplete: if we want to receive something this needs to change
                print("SENT ALL, QUITTING")
                sys.exit(0)

    # CLIENT
    def connect_to_server(self, host, port):
        server_addr = (host, port)
        connid = 0  # remove?
        print("starting connection", connid, "to", server_addr)
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.setblocking(False)
        sock.connect_ex(server_addr)
        events = selectors.EVENT_READ | selectors.EVENT_WRITE
        data = types.SimpleNamespace(
            connid=connid,
            msg_total=sum(len(m) for m in self.messages),
            recv_total=0,
            messages=list(self.messages),
            outb=b"",
        )
        self.selector.register(sock, events, data=data)
        return sock


# SERVER
def setup_server_socket():
    selector = selectors.DefaultSelector()
    # AF_INET --> internet family ipv4, SOCK_STREAM --> TCP
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.bind((HOST, PORT))
    sock.listen()
    print('listening on', (HOST, PORT))
    sock.setblocking(False)
    selector.register(sock, selectors.EVENT_READ, data=None)
    return sock, selector


def create_log_folders_and_files():
    # this needs to go before the log function as the log folder does not exist yet
    if not os.path.exists(LOG_FOLDER_PATH):
        print('create new log folder directory')
        os.makedirs(LOG_FOLDER_PATH)
    if not os.path.exists(LOG_FILE_PATH):
        print('create new log file')
        open(LOG_FILE_PATH, 'w').close()

    if not os.path.exists(CONFIG_FOLDER):
        log('general', f"config folder: {CONFIG_FOLDER} does not exist.\n Creating new folder.")
        os.makedirs(CONFIG_FOLDER)

    if not os.path.exists(URL_VID_LOG_PATH):
        log('general',
            f"URL Video Log File: {URL_VID_LOG_PATH} does not exist.\n Creating new file.")
        open(URL_VID_LOG_PATH, 'w').close()
    if not os.path.exists(CUT_LOG_PATH):
        log('general', f"Cut Log File: {CUT_LOG_PATH} does not exist.\n Creating new file.")
        open(CUT_LOG_PATH, 'w').close()


def main():
    # temporary turn off forking, so we can debug the application better
    if os.fork():
        sys.exit()
    argv = sys.argv[1:]  # remove application name
    create_log_folders_and_files()

    # we are the first process (server
    try:
        vfcut_socket, selector = setup_server_socket()
    except Exception as toplevelex:
        log('exception', str(toplevelex))
        log('exception_details', traceback.print_exc())
        # there is already a server, so we relay arguments to it
        client = VFCutClient(argv)
        client_sock = client.connect_to_server(HOST, PORT)
        try:
            client.run_eventloop()
        except Exception as ex:
            log('exception', str(ex))
            client_sock.close()
            exit(1)
        finally:
            exit(0)

    try:
        server = VFCutServer(vfcut_socket, selector, argv)
        server.update_and_listen_connections()
    except Exception as ex:
        log('exception', str(ex))
        log('exception_details', traceback.print_exc())
    finally:
        vfcut_socket.close()


if __name__ == "__main__":
    main()
